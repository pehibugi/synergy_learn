from random import randint

# Матрица
class question_1_class():

    def __init__(self, quest_str, num_quest, name_quest):

        self.quest_str = quest_str
        self.num_quest = num_quest
        self.name_quest = name_quest

        '''Описание:
            С помощью цикла создайте матрицу вида 10x10 (пример):
            [
            [0,-2,-5,-5,0,-4,-1,-23,-11,-20],
            [-4,-6,16,9,-8,2,10,-32,-18,-13],
            [21,7,-6,-3,34,-7,-23,25,27,38],
            [7,29,38,19,55,48,46,49,-8,-46],
            [80,-3,76,46,72,-33,14,0,71,-20],
            [82,95,23,-6,1,70,50,16,25,7],
            [52,36,-25,-35,18,-36,93,11,-44,9],
            [114,108,33,61,-4,131,34,-26,47,-17],
            [37,56,135,-12,34,67,-17,14,93,-67],
            [-4,23,175,-44,30,-38,89,159,28,178]
            ]
            
            И ещё одну - такой же размерности. 
            Числа в матрице выше приведены в качестве примера 
            (одна из генераций) 
            Итого у вас должно получиться сперва две матрица одинаковой размерности
            
            И теперь вам нужно сложить эти две матрицы в третью. Формулу сложения матриц,
            вы можете найти в интернете, либо посетив этот ресурс 
            Итак. Вы должны создать две матрицы Чтобы заполнить матрицы различными значениями
            - воспользуйтесь модулем random. Для подключения модуля random в код используйте строчку,
            которую нужно поместить в самое начало вашего скрипта import random 
            Для справки: Random. Официальная документация по модулю (англ.яз)
            Random. Информация на русском языке 
            Для начала вы можете просто создать переменные matrix_1 и matrix_2 
            
            matrix_1 = [
             [0,-2,-1,-6,-6,0,-9,-8,-30,-9],
             [5,12,4,-16,-4,-9,-16,-15,1,-26],
             [13,39,14,23,-4,40,32,6,-8,23],
             [13,-8,34,49,30,18,47,11,-24,11],
             [21,73,71,61,-1,79,-34,22,69,67],
             [75,25,25,39,100,-12,-21,81,-10,87],
             [81,63,102,104,53,-44,71,-36,-36,-9],
             [7,98,26,-3,128,94,18,-26,14,21],
             [65,128,80,124,27,-32,73,59,19,34],
             [43,111,38,149,5,112,79,53,15,92]
             ]
             
             matrix_2=[
             [0,4,6,11,15,6,9,26,15,21],
             [-5,4,-15,-9,-4,2,-8,19,-4,-1],
             [-2,-39,-19,14,22,5,-34,15,16,-9],
             [-22,-52,11,-11,-3,16,-11,-6,-32,-2],
             [-61,-47,-5,-58,16,-13,28,-36,-64,2],
             [-29,23,19,2,-14,-87,7,-88,39,7],
             [-6,18,-97,26,-64,0,-72,-34,-68,-92],
             [-120,-117,-72,-129,-139,16,-61,36,-137,-29],
             [-112,-83,7,-119,-132,-129,-143,-154,-23,-34],
             [32,-67,-75,-92,15,-163,18,31,-162,-16]
             ]
             
             И теперь нужно придумать, как их сложить, чтобы получить matrix_3:
             
             matrix_3=[
             [0,2,5,5,9,6,0,18,-15,12],
             [0,16,-11,-25,-8,-7,-24,4,-3,-27],
             [11,0,-5,37,18,45,-2,21,8,14],
             [-9,-60,45,38,27,34,36,5,-56,9],
             [-40,26,66,3,15,66,-6,-14,5,69],
             [46,48,44,41,86,-99,-14,-7,29,94],
             [75,81,5,130,-11,-44,-1,-70,-104,-101],
             [-113,-19,-46,-132,-11,110,-43,10,-123,-8],
             [-47,45,87,5,-105,-161,-70,-95,-4,0],
             [75,44,-37,57,20,-51,97,84,-147,76]]
             
             Потренируйтесь сперва в сложении матриц, а затем попробуйте с помощью модуля random
             сгенерировать матрицы подобных размеров и уже на них применить навыки сложения 
             matrix_1 и matrix_2.
             Задание считается выполненным, если вы напишите алгоритм,
             который будет уметь как складывать матрицы, так и генерировать матрица различных размерностей.
             Будь то матрицы 10х10 или 4х3
        '''

    # Последовательное исполнение
    def enter(self):
        print(self.quest_str.format(self.num_quest, self.name_quest)) # Номер задания

        width, height = self.survey()  # Опрос
        matrix_1 = self.matrix_first(width, height)  # Создание первой матрицы (matrix_1)
        matrix_2 = self.matrix_second(width, height) # Создание второй матрицы (matrix_2)
        matrix_3 = self.matrix_third(matrix_1, matrix_2) # Создание третьей матрицы (matrix_3)
        self.output_result(matrix_1, matrix_2, matrix_3) # Вывод результата

        return


    '''Основные функции'''
    # Опрос
    def survey(self):
        min = 1
        max = 10

        # Введите ширину матрицы (от 1 до 10)
        try:
            width = int(input('Введите ширину матрицы (от 1 до 10)\n>>> '))
        except:
            width = 0

        if min <= width <= max:
            pass

        else:
            print('Введенное число не корректно!')
            return self.survey()

        # Введите Высоту матрицы (от 1 до 10)
        try:
            height = int(input('Введите высоту матрицы (от 1 до 10)\n>>> '))
        except:
            height = 0

        if min <= height <= max:
            pass

        else:
            print('Введенное число не корректно!')
            return self.survey()

        return width, height

    # Создание первой матрицы (matrix_1)
    def matrix_first(self, width, height):
        matrix_1 = []

        for i in range(height):
            the_cube = self.filling_the_cube(width)
            matrix_1.append(the_cube)

        return matrix_1

    # Создание второй матрицы (matrix_2)
    def matrix_second(self, width, height):
        matrix_2 = []

        for i in range(height):
            the_cube = self.filling_the_cube(width)
            matrix_2.append(the_cube)

        return matrix_2

    # Создание третьей матрицы (matrix_3)
    def matrix_third(self, list_x, list_y):
        matrix_3 = []

        coin = 0
        max_coin = len(list_x)

        while coin != max_coin:
            cube_x = list_x[coin] # взять значение из куба первой матрицы
            cube_y = list_y[coin] # взять значение из куба второй матрицы

            buffer = self.filling_the_cube_merger(cube_x, cube_y) # слияние значений в кубе
            matrix_3.append(buffer) # Добавить значение нового куба к матрице

            coin += 1  # Завершение цикла

        return matrix_3

    # Вывод результата
    def output_result(self, matrix_1, matrix_2, matrix_3):
        print(f'Матрица №1')
        for i in matrix_1:
            print(i)
        self.setting('sep')

        print(f'Матрица №2')
        for i in matrix_2:
            print(i)
        self.setting('sep')

        print(f'Матрица №3')
        for i in matrix_3:
            print(i)
        self.setting('sep')


    '''Дополнительные функции'''
    # настройки
    def setting(self, cmd):
        if cmd == 'sep':
            print(f'{"-" * 35}\n')

        return

    # генерация случайных чисел
    def random_number(self):
        number = randint(-500, 500)

        return number

    # Слияние чисел в кубе (matrix 3)
    def filling_the_cube_merger(self, cube_x, cube_y):
        coin = 0
        max_coin = len(cube_x)

        buffer = []
        while coin != max_coin:
            num_cube_x = cube_x[coin]
            num_cube_y = cube_y[coin]

            num_cube_t = num_cube_x + num_cube_y
            buffer.append(num_cube_t)

            coin += 1  # завершение кода

        return buffer

    # Заполнение куба матрицы (Случайная генерация)
    def filling_the_cube(self, width):

        buffer = []
        buffer.clear()
        while width != 0:
            random_num = self.random_number()
            buffer.append(random_num)

            width -= 1  # Завершение цикла width

        return buffer

quest_str, name_quest = ['Задание №{} "{}"', ['Матрица']]

data_quest_1 = question_1_class(quest_str, 1, name_quest[0])
data_quest_1.enter()
